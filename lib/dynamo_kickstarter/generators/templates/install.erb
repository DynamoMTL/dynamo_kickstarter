#!/bin/bash

#
# Defaults
#

D_BINARIES="git ruby gem bundle brewdle sed mktemp curl pg_ctl"  # required programs

D_CAMPFIRE_URL="https://dynamo1.campfirenow.com/room/347717"

D_WIKI_URL="https://www.github.com/DynamoMtl/dynamo-central/wiki"

D_APP_NAME="<%= application_name %>"

D_RUBY_VERSION="1.9.3"

D_HEROKU_APP="<%= application_name %>-production"

D_DATABASE_NAME="<%= application_name %>_development"

#
# Main
#

main() {

  display_welcome
  check_environment
  prepare_install_env
  cd_to_app_dir
  database_setup
  prepare_brew_bundle
  prepare_gem_bundle
  pull_database_from_heroku
  display_goodbye

  exit 0
}

# define: provide heredoc functionality
# Example:
#   define VAR <<'EOF'
#   somecontent
#   EOF
#
define() {
  IFS='\n' read -r -d '' ${1};
}

#
# Messages
#

define WELCOME_MSG <<'EOT'
################################################################################

Running this script will install <%= application_name %> on your computer. The script
assumes you have a standard Ruby on Rails development environment setup. See:

https://github.com/DynamoMTL/dynamo-central/wiki/Setup-your-Development-Environment

Once the application is installed it will pull the database down from
the associated heroku application and restore it against your local
environment so you are all ready to go.

################################################################################
EOT

define GOODBYE_MSG <<'EOT'
################################################################################

It worked! :)

Start your development environment with:

    cd path/to/install/<%= application_name %>
    foreman start

And visit http://localhost:3000
EOT

define RVM_MSG <<'EOT'
RVM was not found on your system (or it isn't working properly).
It is higly recommended to use it, since it's making it extremely easy
to install, manage and work with multiple ruby environments.

For more details check out https://rvm.io//
EOT

#
# Functions
#

info() {
  echo -n "--> $1"
}

status() {
  echo -n "$1"
}

error() {
  echo "\n"
  echo "[ERROR] -- $1"
  echo "        --"
  echo "        -- have a look at our wiki: $D_WIKI_URL"
  echo "        -- or ask us in the Campfire room $D_CAMPFIRE_URL"
  exit 1
}

fn_exists() {
  type -t $1 | grep -q 'function'
}

run_or_error() {
  echo ""
  eval "$1"
  if [ $? -ne 0 ]; then
    error "executing '$1' failed."
  fi
  echo ""
}

display_welcome() {
  echo "$WELCOME_MSG"
  read -p "Press [Enter] to continue... "
}

check_environment() {
  check_binaries
  check_rvm
}

check_binaries() {
  for exe in $D_BINARIES; do
    info "Checking for $exe... ";
    which "$exe"
    if [ $? -ne 0 ]; then
      error "you are missing $exe";
    fi
  done
  echo ""
}

check_rvm() {
  info "Checking for rvm... "
  fn_exists rvm
  if [ $? -eq 0 ] ; then
    RVM_DETECTED=true

  # seems we don't have it loaded, try to do so
  elif [[ -s "$HOME/.rvm/scripts/rvm" ]] ; then
    source "$HOME/.rvm/scripts/rvm" >/dev/null 2>&1
    RVM_DETECTED=true
  elif [[ -s "/usr/local/rvm/scripts/rvm" ]] ; then
    source "/usr/local/rvm/scripts/rvm" >/dev/null 2>&1
    RVM_DETECTED=true
  fi

  if $RVM_DETECTED ; then
    status "OK"
  else
    status "FAIL"
    echo "$RVM_MSG"
    read -p "Press [Enter] to continue without RVM or abort this script and install RVM..."
  fi
  echo ""
}

prepare_install_env() {
  install_or_use_ruby
  load_rvmrc

  run_or_error "gem install bundler"
  run_or_error "gem install brewdler"
}

install_or_use_ruby() {
  if ! $RVM_DETECTED ; then
    return
  fi

  # make sure we have the correct ruby version available
  info "Checking your ruby version... "
  rvm use $D_RUBY_VERSION >/dev/null 2>&1
  if [ $? -ne 0 ] ; then
    status "FAIL"
    rvm --force install $D_RUBY_VERSION
  else
    status "OK"
  fi

  echo ""
}

load_rvmrc() {
  if ! $RVM_DETECTED ; then
    return
  fi

  cd "$D_APP_NAME"

  # trust rvmrc
  rvm rvmrc is_trusted
  if [ $? -ne 0 ] ; then
    rvm rvmrc trust
  fi

  # load .rvmrc
  info "Loading .rvmrc ... "
  source .rvmrc

  if [ $? -eq 0 ] ; then
    status "OK"
  else
    status "FAIL"
  fi

  cd ".."

  echo ""
}

cd_to_app_dir() {
  cd "$D_APP_NAME"
}

database_setup() {
  info "Database setup"
  run_or_error "cp config/database.yml.example config/database.yml"

  info "Delete database $D_DATABASE_NAME (if it exists)"
  echo ""
  read -p "Press [Enter] to continue..."

  dropdb $D_DATABASE_NAME >/dev/null 2>&1
  run_or_error "createdb $D_DATABASE_NAME"

  echo ""
}

prepare_brew_bundle() {
  info "Installing all required system packages..."
  run_or_error "NOEXEC=0 brewdle install"

  echo ""
}

prepare_gem_bundle() {
  info "Installing all required gems..."
  run_or_error "bundle install"

  echo ""
}

pull_database_from_heroku() {
  info "Pull database from Heroku: $D_HEROKU_APP"
  run_or_error "gem install heroku"
  echo ""
  heroku login

  heroku pgbackups:capture --app $D_HEROKU_APP --expire &&
    curl -o /tmp/$D_HEROKU_APP.dump `heroku pgbackups:url --app $D_HEROKU_APP` &&
    pg_restore --verbose --clean --no-acl --no-owner -U root -d $D_DATABASE_NAME /tmp/$D_HEROKU_APP.dump > /dev/null

  echo ""
}

display_goodbye() {
  echo "$GOODBYE_MSG"
}

main
